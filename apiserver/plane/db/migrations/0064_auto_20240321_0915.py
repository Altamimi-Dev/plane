# Generated by Django 4.2.10 on 2024-03-21 09:15

# Third party imports
from bs4 import BeautifulSoup
from django.conf import settings
from django.db import migrations


def convert_issue_description_image_sources(apps, schema_editor):

    file_assets = {}

    if settings.USE_MINIO:
        prefix1 = (
            f"{settings.AWS_S3_URL_PROTOCOL}//{settings.AWS_S3_CUSTOM_DOMAIN}/"
        )
        prefix2 = prefix1
    else:
        prefix1 = f"https://{settings.AWS_STORAGE_BUCKET_NAME}.s3.{settings.AWS_REGION}.amazonaws.com/"
        prefix2 = (
            f"https://{settings.AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/"
        )

    Issue = apps.get_model("db", "Issue")

    bulk_issues = []

    for issue in Issue.objects.all():
        # Parse the html
        soup = BeautifulSoup(issue.description_html, "lxml")
        img_tags = soup.find_all("img")
        for img in img_tags:
            src = img.get("src", "")
            if src and (src.startswith(prefix1)):
                img["src"] = src[len(prefix1) :]
                file_assets[src[len(prefix1) :]] = {
                    "project_id": str(issue.project_id),
                    "issue_id": str(issue.id),
                }
                issue.description_html = str(soup)
                bulk_issues.append(issue)

            # prefix 2
            if not settings.USE_MINIO and src and src.startswith(prefix2):
                img["src"] = src[len(prefix2) :]
                file_assets[src[len(prefix2) :]] = {
                    "project_id": str(issue.project_id),
                    "issue_id": str(issue.id),
                }
                issue.description_html = str(soup)
                bulk_issues.append(issue)

    # Update the issue description htmls
    Issue.objects.bulk_update(
        bulk_issues, ["description_html"], batch_size=1000
    )

    # Update file assets
    FileAsset = apps.get_model("db", "FileAsset")
    bulk_assets = []
    for asset in FileAsset.objects.filter(asset__in=file_assets.keys()):
        asset.project_id = file_assets[str(asset.asset)]["project_id"]
        asset.entity_identifier = file_assets[str(asset.asset)]["issue_id"]
        asset.entity_type = "issue_description"
        bulk_assets.append(asset)

    FileAsset.objects.bulk_update(
        bulk_assets,
        [
            "project_id",
            "entity_identifier",
            "entity_type",
        ],
        batch_size=100,
    )
    return


def convert_page_image_sources(apps, schema_editor):

    file_assets = {}

    if settings.USE_MINIO:
        prefix1 = (
            f"{settings.AWS_S3_URL_PROTOCOL}//{settings.AWS_S3_CUSTOM_DOMAIN}/"
        )
        prefix2 = prefix1
    else:
        prefix1 = f"https://{settings.AWS_STORAGE_BUCKET_NAME}.s3.{settings.AWS_REGION}.amazonaws.com/"
        prefix2 = (
            f"https://{settings.AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/"
        )

    Page = apps.get_model("db", "Page")
    FileAsset = apps.get_model("db", "FileAsset")

    bulk_pages = []
    bulk_assets = {}

    for page in Page.objects.all():
        # Parse the html
        soup = BeautifulSoup(page.description_html, "lxml")
        img_tags = soup.find_all("img")
        for img in img_tags:
            src = img.get("src", "")
            if src and (src.startswith(prefix1)):
                img["src"] = src[len(prefix1) :]
                file_assets[src[len(prefix1) :]] = {
                    "project_id": str(page.project_id),
                    "page_id": str(page.id),
                }
                page.description_html = str(soup)
                bulk_pages.append(page)

            # prefix 2
            if not settings.USE_MINIO and src and src.startswith(prefix2):
                img["src"] = src[len(prefix2) :]
                file_assets[src[len(prefix2) :]] = {
                    "project_id": str(page.project_id),
                    "page_id": str(page.id),
                }
                page.description_html = str(soup)
                bulk_pages.append(page)

    Page.objects.bulk_update(bulk_pages, ["description_html"], batch_size=1000)

    # Update file assets
    FileAsset = apps.get_model("db", "FileAsset")
    bulk_assets = []
    for asset in FileAsset.objects.filter(asset__in=file_assets.keys()):
        asset.project_id = file_assets[str(asset.asset)]["project_id"]
        asset.entity_identifier = file_assets[str(asset.asset)]["page_id"]
        asset.entity_type = "page"
        bulk_assets.append(asset)

    FileAsset.objects.bulk_update(
        bulk_assets,
        [
            "project_id",
            "entity_identifier",
            "entity_type",
        ],
        batch_size=100,
    )
    return


def convert_comment_image_sources(apps, schema_editor):

    file_assets = {}

    if settings.USE_MINIO:
        prefix1 = (
            f"{settings.AWS_S3_URL_PROTOCOL}//{settings.AWS_S3_CUSTOM_DOMAIN}/"
        )
        prefix2 = prefix1
    else:
        prefix1 = f"https://{settings.AWS_STORAGE_BUCKET_NAME}.s3.{settings.AWS_REGION}.amazonaws.com/"
        prefix2 = (
            f"https://{settings.AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/"
        )

    IssueComment = apps.get_model("db", "IssueComment")

    bulk_comments = []
    bulk_assets = {}

    for comment in IssueComment.objects.all():
        # Parse the html
        soup = BeautifulSoup(comment.comment_html, "lxml")
        img_tags = soup.find_all("img")
        for img in img_tags:
            src = img.get("src", "")
            if src and (src.startswith(prefix1)):
                img["src"] = src[len(prefix1) :]
                file_assets[src[len(prefix1) :]] = {
                    "project_id": str(comment.project_id),
                    "comment_id": str(comment.id),
                }
                comment.comment_html = str(soup)
                bulk_comments.append(comment)

            # prefix 2
            if not settings.USE_MINIO and src and src.startswith(prefix2):
                img["src"] = src[len(prefix2) :]
                file_assets[src[len(prefix2) :]] = {
                    "project_id": str(comment.project_id),
                    "comment_id": str(comment.id),
                }
                comment.comment_html = str(soup)
                bulk_comments.append(comment)

    IssueComment.objects.bulk_update(
        bulk_comments, ["comment_html"], batch_size=1000
    )

    # Update file assets
    FileAsset = apps.get_model("db", "FileAsset")
    bulk_assets = []
    for asset in FileAsset.objects.filter(asset__in=file_assets.keys()):
        asset.project_id = file_assets[str(asset.asset)]["project_id"]
        asset.entity_identifier = file_assets[str(asset.asset)]["comment_id"]
        asset.entity_type = "comment"
        bulk_assets.append(asset)

    FileAsset.objects.bulk_update(
        bulk_assets,
        [
            "project_id",
            "entity_identifier",
            "entity_type",
        ],
        batch_size=100,
    )
    return


class Migration(migrations.Migration):

    dependencies = [
        ("db", "0063_auto_20240321_0913"),
    ]

    operations = [
        migrations.RunPython(convert_issue_description_image_sources),
        migrations.RunPython(convert_page_image_sources),
        migrations.RunPython(convert_comment_image_sources),
    ]
